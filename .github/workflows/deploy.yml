name: Deploy to Hetzner

on:
  push:
    branches:
      - main

concurrency:
  group: deployment-main
  cancel-in-progress: true

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SERVER_IP }}
      SSH_USER: ${{ secrets.SERVER_USER }}
      SSH_PASS: ${{ secrets.SERVER_PASS }}
      SSH_PORT: ${{ secrets.SERVER_PORT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images (verification)
        run: |
          docker compose --progress plain build

      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Deploy to Hetzner host
        env:
          REPO_URL: https://github.com/${{ github.repository }}.git
        run: |
          set -euo pipefail
          sshpass -p "${SSH_PASS}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" "REPO_URL='${REPO_URL}' bash -s" <<'SSH'
            set -euo pipefail
            REPO_DIR="/root/Meister-Barbershop"
            if [ ! -d "${REPO_DIR}/.git" ]; then
              mkdir -p "$(dirname "${REPO_DIR}")"
              git clone "${REPO_URL}" "${REPO_DIR}"
            fi
            cd "${REPO_DIR}"
            export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
            if command -v docker >/dev/null 2>&1; then
              DOCKER_BIN="docker"
            elif [ -x /usr/bin/docker ]; then
              DOCKER_BIN="/usr/bin/docker"
            else
              echo "Docker binary not found in PATH."
              exit 127
            fi
            if ${DOCKER_BIN} compose version >/dev/null 2>&1; then
              COMPOSE_CMD="${DOCKER_BIN} compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              COMPOSE_CMD="docker-compose"
            else
              echo "Docker Compose is not available."
              exit 127
            fi
            git fetch origin main
            git pull origin main
            ${COMPOSE_CMD} down
            ${COMPOSE_CMD} build --no-cache
            ${COMPOSE_CMD} up -d
            sleep 15
            ${COMPOSE_CMD} ps
            ${DOCKER_BIN} ps
            STATUS=$(curl -s -o /tmp/deploy_curl.log -w "%{http_code}" http://localhost || true)
            if [ "${STATUS}" -lt 200 ] || [ "${STATUS}" -ge 300 ]; then
              echo "Unexpected HTTP status: ${STATUS}"
              cat /tmp/deploy_curl.log || true
              exit 1
            fi
            echo "Application responded with HTTP ${STATUS}"
          SSH
